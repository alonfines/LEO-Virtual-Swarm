//
// Generated file, do not edit! Created by nedtool 5.6 from node/Packet.msg.
//

#ifndef __PACKET_M_H
#define __PACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>node/Packet.msg:14</tt> by nedtool.
 * <pre>
 * //
 * // Represents a packet in the network.
 * //
 * packet Packet
 * {
 *     int srcAddr;
 *     int intermediateSrcAddr;
 *     int destAddr;	// to be changed every hop
 * 
 *     // algos parameters
 *     int TTL;
 *     bool reachedJ;
 *     int b1;
 *     int b2;
 *     int u;
 *     int v;
 *     int j;
 *     bool Wfailed;
 *     bool Efailed;
 * 
 *     // statistics
 *     int hopCount;
 * }
 * </pre>
 */
class Packet : public ::omnetpp::cPacket
{
  protected:
    int srcAddr;
    int intermediateSrcAddr;
    int destAddr;
    int TTL;
    bool reachedJ;
    int b1;
    int b2;
    int u;
    int v;
    int j;
    bool Wfailed;
    bool Efailed;
    int hopCount;
    int numPktperMsg;

  private:
    void copy(const Packet& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Packet&);

  public:
    Packet(const char *name=nullptr, short kind=0);
    Packet(const Packet& other);
    virtual ~Packet();
    Packet& operator=(const Packet& other);
    virtual Packet *dup() const override {return new Packet(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSrcAddr() const;
    virtual void setSrcAddr(int srcAddr);
    virtual int getIntermediateSrcAddr() const;
    virtual void setIntermediateSrcAddr(int intermediateSrcAddr);
    virtual int getDestAddr() const;
    virtual void setDestAddr(int destAddr);
    virtual int getTTL() const;
    virtual void setTTL(int TTL);
    virtual bool getReachedJ() const;
    virtual void setReachedJ(bool reachedJ);
    virtual int getB1() const;
    virtual void setB1(int b1);
    virtual int getB2() const;
    virtual void setB2(int b2);
    virtual int getU() const;
    virtual void setU(int u);
    virtual int getV() const;
    virtual void setV(int v);
    virtual int getJ() const;
    virtual void setJ(int j);
    virtual bool getWfailed() const;
    virtual void setWfailed(bool Wfailed);
    virtual bool getEfailed() const;
    virtual void setEfailed(bool Efailed);
    virtual int getHopCount() const;
    virtual void setHopCount(int hopCount);
    virtual int getnumPktperMsg() const;// new
    virtual void setnumPktperMsg(int numPktperMsg); //new
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Packet& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Packet& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>node/Packet.msg:35</tt> by nedtool.
 * <pre>
 * message Control
 * {
 *     double time;
 *     int address;
 *     int IsAsending;
 * }
 * </pre>
 */
class Control : public ::omnetpp::cMessage
{
  protected:
    double time;
    int address;
    int IsAsending;

  private:
    void copy(const Control& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Control&);

  public:
    Control(const char *name=nullptr, short kind=0);
    Control(const Control& other);
    virtual ~Control();
    Control& operator=(const Control& other);
    virtual Control *dup() const override {return new Control(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getTime() const;
    virtual void setTime(double time);
    virtual int getAddress() const;
    virtual void setAddress(int address);
    virtual int getIsAsending() const;
    virtual void setIsAsending(int IsAsending);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Control& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Control& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PACKET_M_H

